/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalSeleniumParser;
import org.xtext.example.mydsl.services.SeleniumGrammarAccess;

public class SeleniumParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SeleniumGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SeleniumGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProgramAccess().getRetAlternatives_2_0(), "rule__Program__RetAlternatives_2_0");
			builder.put(grammarAccess.getInstructionAccess().getAlternatives_0(), "rule__Instruction__Alternatives_0");
			builder.put(grammarAccess.getVerifyAccess().getAlternatives_1(), "rule__Verify__Alternatives_1");
			builder.put(grammarAccess.getVerifyAccess().getAlternatives_3(), "rule__Verify__Alternatives_3");
			builder.put(grammarAccess.getFillTextAccess().getAlternatives_1(), "rule__FillText__Alternatives_1");
			builder.put(grammarAccess.getVariableAccess().getAlternatives_3(), "rule__Variable__Alternatives_3");
			builder.put(grammarAccess.getCheckAccess().getAlternatives_1(), "rule__Check__Alternatives_1");
			builder.put(grammarAccess.getCheckAccess().getAlternatives_2(), "rule__Check__Alternatives_2");
			builder.put(grammarAccess.getElementAccess().getAlternatives_4(), "rule__Element__Alternatives_4");
			builder.put(grammarAccess.getByAccess().getAlternatives(), "rule__By__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
			builder.put(grammarAccess.getGoAccess().getGroup(), "rule__Go__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup_3_1(), "rule__Verify__Group_3_1__0");
			builder.put(grammarAccess.getFillTextAccess().getGroup(), "rule__FillText__Group__0");
			builder.put(grammarAccess.getFillTextAccess().getGroup_1_1(), "rule__FillText__Group_1_1__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_3_1(), "rule__Variable__Group_3_1__0");
			builder.put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
			builder.put(grammarAccess.getCheckAccess().getGroup(), "rule__Check__Group__0");
			builder.put(grammarAccess.getCheckAccess().getGroup_1_1(), "rule__Check__Group_1_1__0");
			builder.put(grammarAccess.getSelectComboAccess().getGroup(), "rule__SelectCombo__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
			builder.put(grammarAccess.getElementAccess().getGroup_4_1(), "rule__Element__Group_4_1__0");
			builder.put(grammarAccess.getByPropertyAccess().getGroup(), "rule__ByProperty__Group__0");
			builder.put(grammarAccess.getGlobalAccess().getProgramsAssignment(), "rule__Global__ProgramsAssignment");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_0(), "rule__Program__NameAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getRetAssignment_2(), "rule__Program__RetAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getInsAssignment_5(), "rule__Program__InsAssignment_5");
			builder.put(grammarAccess.getGoAccess().getUrlAssignment_1(), "rule__Go__UrlAssignment_1");
			builder.put(grammarAccess.getVerifyAccess().getElemAssignment_1_1(), "rule__Verify__ElemAssignment_1_1");
			builder.put(grammarAccess.getVerifyAccess().getTextAssignment_3_0(), "rule__Verify__TextAssignment_3_0");
			builder.put(grammarAccess.getVerifyAccess().getVarAssignment_3_1_1(), "rule__Verify__VarAssignment_3_1_1");
			builder.put(grammarAccess.getVerifyAccess().getElementAssignment_3_2(), "rule__Verify__ElementAssignment_3_2");
			builder.put(grammarAccess.getFillTextAccess().getTextAssignment_1_0(), "rule__FillText__TextAssignment_1_0");
			builder.put(grammarAccess.getFillTextAccess().getVarAssignment_1_1_1(), "rule__FillText__VarAssignment_1_1_1");
			builder.put(grammarAccess.getFillTextAccess().getPropAssignment_3(), "rule__FillText__PropAssignment_3");
			builder.put(grammarAccess.getFillTextAccess().getTargetAssignment_4(), "rule__FillText__TargetAssignment_4");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getAttrAssignment_3_1_1(), "rule__Variable__AttrAssignment_3_1_1");
			builder.put(grammarAccess.getVariableAccess().getElemAssignment_5(), "rule__Variable__ElemAssignment_5");
			builder.put(grammarAccess.getCheckAccess().getByAssignment_1_1_0(), "rule__Check__ByAssignment_1_1_0");
			builder.put(grammarAccess.getCheckAccess().getTargetAssignment_1_1_1(), "rule__Check__TargetAssignment_1_1_1");
			builder.put(grammarAccess.getSelectComboAccess().getByAssignment_1(), "rule__SelectCombo__ByAssignment_1");
			builder.put(grammarAccess.getSelectComboAccess().getTargetAssignment_2(), "rule__SelectCombo__TargetAssignment_2");
			builder.put(grammarAccess.getElementAccess().getTypeAssignment_0(), "rule__Element__TypeAssignment_0");
			builder.put(grammarAccess.getElementAccess().getNumberAssignment_1_1(), "rule__Element__NumberAssignment_1_1");
			builder.put(grammarAccess.getElementAccess().getSelectorAssignment_3(), "rule__Element__SelectorAssignment_3");
			builder.put(grammarAccess.getElementAccess().getTargetAssignment_4_0(), "rule__Element__TargetAssignment_4_0");
			builder.put(grammarAccess.getElementAccess().getVarAssignment_4_1_1(), "rule__Element__VarAssignment_4_1_1");
			builder.put(grammarAccess.getByPropertyAccess().getPropertyAssignment_1(), "rule__ByProperty__PropertyAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SeleniumGrammarAccess grammarAccess;

	@Override
	protected InternalSeleniumParser createParser() {
		InternalSeleniumParser result = new InternalSeleniumParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SeleniumGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SeleniumGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
